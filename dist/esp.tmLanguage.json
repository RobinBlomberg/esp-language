{
  "name": "ESP",
  "scopeName": "source.esp",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#callIdentifier"
    },
    {
      "include": "#identifier"
    },
    {
      "include": "#literal"
    }
  ],
  "repository": {
    "callIdentifier": {
      "name": "entity.name.function.esp",
      "match": "(?:(?<![a-zA-Z0-9$_])[a-zA-Z$_][a-zA-Z0-9$_]*(?![a-zA-Z0-9$_]))(?=\\s*(?:(?:\\(|(?::\\s*\\(*)|(?:=\\s*(?::\\s*\\(*)))))"
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.esp",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.esp"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.esp"
            }
          }
        },
        {
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "comment.line.double-slash.esp"
            }
          },
          "end": "(?=$)",
          "contentName": "comment.line.double-slash.esp"
        }
      ]
    },
    "constant": {
      "match": "((?:(?:\\b(?:false)\\b)))|((?:(?:\\b(?:Infinity)\\b)))|((?:(?:\\b(?:NaN)\\b)))|((?:(?:\\b(?:null)\\b)))|((?:(?:\\b(?:true)\\b)))|((?:(?:\\b(?:undefined)\\b)))|((?:(?:\\b(?:break)\\b)|(?:\\b(?:continue)\\b)|(?:\\b(?:do)\\b)|(?:\\b(?:for)\\b)|(?:\\b(?:while)\\b)))|((?:(?:\\b(?:const)\\b)|(?:\\b(?:let)\\b)))|((?:(?:\\b(?:else)\\b)|(?:\\b(?:if)\\b)))|((?:(?:\\b(?:match)\\b)))|((?:(?:\\b(?:new)\\b)))|((?:(?:\\b(?:of)\\b)))|((?:(?:\\b(?:return)\\b)))|((?:(?:\\b(?:throw)\\b)))|((?:(?:--)))|((?:-|(?:\\*\\*=)|(?:\\*=)|(?:/=)|(?:&&=)|(?:%=)|(?:\\+=)|(?:\\|\\|=)))|((?:(?:-=)|\\*|(?:\\*\\*)|/|%|\\+))|((?:!|(?:\\?\\?)|(?:\\?\\?=)|(?:&&)|(?:\\|\\|)))|((?:(?:!=)|(?:==)))|((?:\\?))|((?:&|\\^|\\||~))|((?:(?:&=)|(?:\\^=)|(?:<<=)|(?:>>=)|(?:>>>=)|(?:\\|=)))|((?:(?:\\+\\+)))|((?:<|(?:<=)|>|(?:>=)))|((?:(?:<<)|(?:>>)|(?:>>>)))|((?:=))|((?:,))|((?:;))|((?:\\.))|((?:\\(|\\)))|((?:\\[|\\]))|((?:\\{|\\}))",
      "captures": {
        "1": {
          "name": "constant.language.boolean.false.esp"
        },
        "2": {
          "name": "constant.language.infinity.esp"
        },
        "3": {
          "name": "constant.language.nan.esp"
        },
        "4": {
          "name": "constant.language.null.esp"
        },
        "5": {
          "name": "constant.language.boolean.true.esp"
        },
        "6": {
          "name": "constant.language.undefined.esp"
        },
        "7": {
          "name": "keyword.control.loop.esp"
        },
        "8": {
          "name": "storage.type.esp"
        },
        "9": {
          "name": "keyword.control.conditional.esp"
        },
        "10": {
          "name": "keyword.control.switch.esp"
        },
        "11": {
          "name": "keyword.operator.new.esp"
        },
        "12": {
          "name": "keyword.operator.expression.of.esp"
        },
        "13": {
          "name": "keyword.control.flow.esp"
        },
        "14": {
          "name": "keyword.control.trycatch.esp"
        },
        "15": {
          "name": "keyword.operator.decrement.esp"
        },
        "16": {
          "name": "keyword.operator.assignment.compound.esp"
        },
        "17": {
          "name": "keyword.operator.arithmetic.esp"
        },
        "18": {
          "name": "keyword.operator.logical.esp"
        },
        "19": {
          "name": "keyword.operator.comparison.esp"
        },
        "20": {
          "name": "keyword.operator.ternary.esp"
        },
        "21": {
          "name": "keyword.operator.bitwise.esp"
        },
        "22": {
          "name": "keyword.operator.assignment.compound.bitwise.esp"
        },
        "23": {
          "name": "keyword.operator.increment.esp"
        },
        "24": {
          "name": "keyword.operator.relational.esp"
        },
        "25": {
          "name": "keyword.operator.bitwise.shift.esp"
        },
        "26": {
          "name": "keyword.operator.assignment.esp"
        },
        "27": {
          "name": "punctuation.separator.comma.esp"
        },
        "28": {
          "name": "punctuation.terminator.statement.esp"
        },
        "29": {
          "name": "punctuation.accessor.esp"
        },
        "30": {
          "name": "meta.brace.round.esp"
        },
        "31": {
          "name": "meta.brace.square.esp"
        },
        "32": {
          "name": "punctuation.definition.block.esp"
        }
      }
    },
    "identifier": {
      "name": "variable.other.readwrite.esp",
      "match": "(?<![a-zA-Z0-9$_])[a-zA-Z$_][a-zA-Z0-9$_]*(?![a-zA-Z0-9$_])"
    },
    "literal": {
      "patterns": [
        {
          "include": "#numericLiteral"
        },
        {
          "include": "#stringLiteral"
        }
      ]
    },
    "numericLiteral": {
      "name": "constant.numeric.decimal.esp",
      "match": "\\b(?:(?:0|(?:[1-9]\\d*)))(?:\\.\\d+)?\\b"
    },
    "stringEscape": {
      "name": "constant.character.escape.esp",
      "match": "\\\\."
    },
    "stringLiteral": {
      "patterns": [
        {
          "name": "string.quoted.single.esp",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.esp"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.esp"
            }
          },
          "patterns": [
            {
              "include": "#stringEscape"
            }
          ]
        },
        {
          "name": "string.quoted.double.esp",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.esp"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.esp"
            }
          },
          "patterns": [
            {
              "include": "#stringEscape"
            }
          ]
        }
      ]
    }
  }
}